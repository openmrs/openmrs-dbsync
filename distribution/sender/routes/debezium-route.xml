<routes xmlns="http://camel.apache.org/schema/spring">
    <route id="debezium" errorHandlerRef="outBoundErrorHandler">
        <from uri="debezium-mysql:extract?databaseServerId={{debezium.db.serverId}}&amp;databaseServerName={{debezium.db.serverName}}&amp;databaseHostname={{openmrs.db.host}}&amp;databasePort={{openmrs.db.port}}&amp;databaseUser={{debezium.db.user}}&amp;databasePassword={{debezium.db.password}}&amp;databaseWhitelist={{openmrs.db.name}}&amp;offsetStorageFileName={{debezium.offsetFilename}}&amp;databaseHistoryFileFilename={{debezium.historyFilename}}&amp;tableWhitelist={{debezium.tablesToSync}}&amp;offsetFlushIntervalMs=0&amp;snapshotMode={{debezium.snapshotMode}}&amp;snapshotFetchSize=1000&amp;snapshotLockingMode=extended&amp;includeSchemaChanges=false" />

        <log message=":" loggingLevel="DEBUG" />
        <log message="Received DB event: Operation=${headers.CamelDebeziumOperation}, Body=${body}, Metadata=${headers.CamelDebeziumSourceMetadata}" />
        <setProperty name="event">
            <spel>#{new org.openmrs.eip.component.entity.Event()}</spel>
        </setProperty>
        <script>
            <spel>
                <!-- TODO Take care of situation where a table has a composite FK -->
                #{getProperty('event').setPrimaryKeyId(request.headers.CamelDebeziumKey.get(request.headers.CamelDebeziumKey.schema().fields().get(0)))}
                #{getProperty('event').setTableName(request.headers.CamelDebeziumSourceMetadata.get('table'))}
                #{getProperty('event').setOperation(request.headers.CamelDebeziumOperation)}
                #{getProperty('event').setSnapshot(request.headers.CamelDebeziumSourceMetadata.get('snapshot') != 'false')}
            </spel>
        </script>
        <setProperty name="is-subclass">
            <spel>#{getProperty('event').tableName == 'test_order' || getProperty('event').tableName == 'drug_order' || getProperty('event').tableName == 'patient'}</spel>
        </setProperty>

        <choice>
            <when>
                <simple>${headers.CamelDebeziumOperation} == 'c' || ${headers.CamelDebeziumOperation} == 'u' || ${headers.CamelDebeziumOperation} == 'd'</simple>
                <when>
                    <simple>${exchangeProperty.is-subclass} == false</simple>
                    <choice>
                        <when>
                            <simple>${headers.CamelDebeziumOperation} == 'd'</simple>
                            <script>
                                <spel>#{getProperty('event').setIdentifier(request.headers.CamelDebeziumBefore.get('uuid'))}</spel>
                            </script>
                        </when>
                        <otherwise>
                            <script>
                                <spel>#{getProperty('event').setIdentifier(body.get('uuid'))}</spel>
                            </script>
                        </otherwise>
                    </choice>
                </when>

                <log message="${exchangeProperty.event}" loggingLevel="DEBUG" />

                <setProperty name="route-retry-count-map">
                    <spel>#{new java.util.HashMap()}</spel>
                </setProperty>
                <split>
                    <simple>{{db-event.destinations}}</simple>
                    <script>
                        <spel>#{getProperty('route-retry-count-map').put(body.trim(), 0)}</spel>
                    </script>
                </split>
                
                <setProperty name="table-names">
                    <!-- We need to look up failed events for rows in both the parent and subclass tables -->
                    <method beanType="org.openmrs.eip.component.utils.Utils" method="getTablesInHierarchy(${exchangeProperty.event.tableName})" />
                </setProperty>

                <toD uri="jpa:SenderRetryQueueItem?query=SELECT r from SenderRetryQueueItem r WHERE r.event.tableName IN (${exchangeProperty.table-names}) AND r.event.primaryKeyId='${exchangeProperty.event.primaryKeyId}'" />

                <split stopOnException="true">
                    <simple>${body}</simple>
                    <choice>
                        <when>
                            <simple>${exchangeProperty.route-retry-count-map.containsKey(${body.route.trim()})} != true</simple>
                            <throwException exceptionType="java.lang.Exception" message="No listener route found with name ${body.route.trim()}" />
                        </when>
                        <otherwise>
                            <script>
                                <spel>#{getProperty('route-retry-count-map').put(body.route, getProperty('route-retry-count-map').get(body.route.trim()) + 1)}</spel>
                            </script>
                        </otherwise>
                    </choice>
                </split>
                
                <log message="Route and retryCount map -> ${exchangeProperty.route-retry-count-map}" loggingLevel="DEBUG" />
                <setBody>
                    <simple>${exchangeProperty.event}</simple>
                </setBody>

                <to uri="direct:db-event-processor" />
            </when>
            <otherwise>
                <log message="Don't know how to handle DB event -> Operation=${headers.CamelDebeziumOperation}, Body=${body}, Metadata=${headers.CamelDebeziumSourceMetadata}" loggingLevel="ERROR" />
            </otherwise>
        </choice>

    </route>
</routes>
